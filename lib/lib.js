!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.simonlang=n():e.simonlang=n()}(window,(function(){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=1)}([function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toJSOutput = exports.extractVariableName = exports.parse = exports.detectType = void 0;\nfunction detectType(input) {\n    if (!isNaN(parseFloat(input))) {\n        return 'number';\n    }\n    else if (input === 'yes' || input === 'no' || input === 'true' || input === 'false') {\n        return 'boolean';\n    }\n    else {\n        return 'string';\n    }\n}\nexports.detectType = detectType;\nfunction parse(input) {\n    switch (detectType(input)) {\n        case 'number':\n            return parseFloat(input);\n        case 'boolean':\n            return (input === 'yes') || (input === 'true');\n        default:\n        case 'string':\n            return input;\n    }\n}\nexports.parse = parse;\nfunction extractVariableName(input) {\n    return 'simonvar_' + input.split(' ').join('_');\n}\nexports.extractVariableName = extractVariableName;\nfunction toJSOutput(input, context) {\n    if (context.variables.indexOf(input) >= 0) {\n        return extractVariableName(input);\n    }\n    var parsed = parse(input);\n    switch (typeof parsed) {\n        default:\n            return \"\" + parsed;\n        case 'string':\n            return \"\\\"\" + parsed + \"\\\"\";\n    }\n}\nexports.toJSOutput = toJSOutput;\n\n\n//# sourceURL=webpack://simonlang/./compiler/variables.ts?")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar _1 = __webpack_require__(2);\n// declare var window: any;\nwindow.compile = function (simonlangcode) { return _1.compile(simonlangcode); };\n\n\n//# sourceURL=webpack://simonlang/./compiler/lib.ts?')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compile = exports.compileLine = exports.VERSION = void 0;\nvar commands_1 = __webpack_require__(3);\nvar context_1 = __webpack_require__(5);\nexports.VERSION = '0.0.1';\nfunction compileLine(line, context) {\n    line = line.replace('simon ', '');\n    var command = commands_1.CommanNames.find(function (v) { return line.indexOf(v) >= 0; });\n    return commands_1.parseCommand(command, line.replace(command + ' ', ''), context);\n}\nexports.compileLine = compileLine;\nfunction compile(input) {\n    var context = new context_1.SimonLangContext();\n    var lines = [];\n    input.split('\\n').forEach(function (line) {\n        var comp = compileLine(line, context);\n        if (comp.declaration) {\n            context.variables.push(comp.declaration);\n        }\n        lines.push(comp.compiledLine);\n    });\n    return lines.join('\\n');\n}\nexports.compile = compile;\n\n\n//# sourceURL=webpack://simonlang/./compiler/index.ts?")},function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.parseCommand = exports.CommanNames = void 0;\nvar variables_1 = __webpack_require__(0);\nvar declare_1 = __importDefault(__webpack_require__(4));\nvar commands = {\n    says: function (line, context) { return ({\n        compiledLine: "console.log(" + variables_1.toJSOutput(line, context) + ");",\n    }); },\n    declares: declare_1.default\n};\nexports.CommanNames = Object.keys(commands);\nfunction parseCommand(command, remainder, context) {\n    return commands[command] ? commands[command](remainder, context) : { compiledLine: "// SIMON COMPILER ERROR unknown command \\"" + command + "\\"" };\n}\nexports.parseCommand = parseCommand;\n\n\n//# sourceURL=webpack://simonlang/./compiler/commands/index.ts?')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar variables_1 = __webpack_require__(0);\nfunction extractData(line, context) {\n    var declareIndicator = line.indexOf("is") >= 0 ? "is" : "are";\n    var variableData = line.split(" " + declareIndicator + " ");\n    var name = variableData[0];\n    return {\n        name: name,\n        data: variableData[1],\n        isNew: !context.variables.includes(name)\n    };\n}\nexports.default = (function (line, context) {\n    var _a = extractData(line, context), name = _a.name, data = _a.data, isNew = _a.isNew;\n    return {\n        declaration: isNew ? name : null,\n        compiledLine: "" + (isNew ? \'var \' : \'\') + variables_1.extractVariableName(name) + " = " + variables_1.toJSOutput(data, context) + ";",\n    };\n});\n\n\n//# sourceURL=webpack://simonlang/./compiler/commands/declare.ts?')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.SimonLangContext = void 0;\nvar SimonLangContext = /** @class */ (function () {\n    function SimonLangContext(variables) {\n        if (variables === void 0) { variables = []; }\n        this.variables = variables;\n    }\n    return SimonLangContext;\n}());\nexports.SimonLangContext = SimonLangContext;\n\n\n//# sourceURL=webpack://simonlang/./compiler/context.ts?')}])}));